Массивы

— это совокупность элементов одного типа данных, хранящихся в смежных ячейках памяти.

В языке C массив имеет фиксированный размер, что означает, что после того, как ему присвоен размер, его нельзя изменить. 

Причина заключалась в том, что при расширении, если мы изменим размер, мы не можем быть уверены,
что следующая ячейка памяти будет свободна. Уменьшение не сработает, поскольку при объявлении массива память выделяется статически,
и, таким образом, только компилятор может его уничтожить.

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 
Двусвязный список

Тип связанного списка, в котором каждый узел содержит элемент данных и два указателя: 
 1. один указывает на следующий узел в последовательности,
 2. другой указывает на предыдущий узел. 

Эта двунаправленная связь позволяет осуществлять обход как в прямом, так и в обратном направлении. 

В отличие от односвязного списка, где каждый узел указывает только на следующий узел, двусвязный список повышает гибкость определенных операций за счет увеличения требований к объему памяти.

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Связанный список

Структура данных, которая организует и хранит элементы в линейной последовательности. 

В отличие от массивов, связанные списки не требуют смежных ячеек памяти, что обеспечивает динамическое выделение и эффективную вставку и удаление. 

Связанный список состоит из узлов, и каждый узел содержит данные и ссылку на следующий узел в последовательности.
 
Преимущества:
 ⁃ Связанные списки допускают динамическое выделение и освобождение памяти, что делает их пригодными для ситуаций, когда размер заранее неизвестен.
 ⁃ Вставки и удаления могут выполняться более эффективно по сравнению с массивами, особенно в сценариях, предполагающих частые модификации. 

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Хеширование 

— это процесс генерации выходных данных фиксированного размера из входных данных переменного размера с использованием математических формул, известных как хэш-функции. 

Каждый день объем данных в Интернете увеличивается экспоненциально, поэтому нам нужна такая структура данных , которая может хранить эти данные и осуществлять операции с ними таким образом, чтобы это было эффективно. 

Для этого идеально подходит хеш-таблицы! Их важное свойство состоит в том, что, при некоторых разумных допущениях, все три операции (добавление, удаление, поиск элемента) выполняются за время O(1).